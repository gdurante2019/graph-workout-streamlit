///////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Garmin International, Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2022 Garmin International, Inc.
///////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.84Release
// Tag = production/akw/21.84.00-0-g894a113c
///////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

public class ProtocolValidatorFactory {

    private ProtocolValidatorFactory() {
    }

    /**
     * Factory method to create a ProtocolValidator object
     *
     * @param protocolVersion the protocol version
     * @return a ProtocolValidator object
     */
    public static ProtocolValidator getProtocolValidator(Fit.ProtocolVersion protocolVersion) {
        switch (protocolVersion) {
            case V1_0:
                return new V1Validator();

            default:
                return new V2Validator();
        }
    }
}

class V1Validator implements ProtocolValidator {

    private boolean hasDeveloperData(MesgDefinition defn) {
        return defn.developerFields.size() > 0;
    }

    @Override
    public boolean validateMesgDefn(MesgDefinition mesgDefinition) {
        if(hasDeveloperData(mesgDefinition)) {
            return false;
        }

        for (FieldDefinition def : mesgDefinition.getFields()) {
            int typeNum = def.getType() & Fit.BASE_TYPE_NUM_MASK;
            if (typeNum > Fit.BASE_TYPE_BYTE) {
                // Byte was the last type added to 1.0
                return false;
            }
        }

        return true;
    }

    @Override
    public boolean validateMesg(Mesg mesg) {
        if (hasDeveloperData(new MesgDefinition(mesg))) {
            return false;
        }

        for (Field fld : mesg.getFields()) {
            int typeNum = fld.getType() & Fit.BASE_TYPE_NUM_MASK;
            if (typeNum > Fit.BASE_TYPE_BYTE) {
                // Byte was the last type added to 1.0
                return false;
            }
        }

        return true;
    }
}

class V2Validator implements ProtocolValidator {

    @Override
    public boolean validateMesgDefn(MesgDefinition defn) {
        return true;
    }

    @Override
    public boolean validateMesg(Mesg mesg) {
        return true;
    }
}
